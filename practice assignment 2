//q1 butterfly
#include <iostream>

using namespace std;

int main() {
    int n;

    cout << "Enter the size of the butterfly (n): ";
    cin >> n;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        for (int j = 1; j <= 2 * (n - i); j++) {
            cout << " ";
        }
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        cout << endl;
    }
    
    for (int i = n - 1; i >= 1; i--) {
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        for (int j = 1; j <= 2 * (n - i); j++) {
            cout << " ";
        }
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        cout << endl;
    }

    return 0;
}
//q2
#include <iostream>

using namespace std;

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i <n; i++) {
        cin >> arr[i];
    }

    cout << "Array in reverse order: ";
    for (int i = n - 1; i >= 0; i--) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
//q3
#include <iostream>
using namespace std;

int main() {
    int n;

    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int max = arr[0];
    int min = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min= arr[i];
        }
    }

    cout << "Maximum element: " << max << endl;
    cout << "Minimum element: " << min << endl;

    return 0;
}
//q4
#include <iostream>
using namespace std;

int main() {
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    float sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    float average = sum / n;

    cout << "Sum: " << sum << endl;
    cout << "Average: " << average << endl; 

    return 0;
}

Q5 Repeatedly compares adjacent elements and swaps them if they are in the wrong order. Passes through the array multiple times until no more swaps are needed, indicating that the array is sorted.

//q6
#include <iostream>
using namespace std;

int main() {
    int n,key;

    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Enter the element to be found: ";
    cin >> key;
    for (int i = 0; i < n; i++){
        if(arr[i]==key){
            cout<<"key found at index "<<i<<endl;
            break;
        }
    }
    return 0;
}

//q9 transpose
#include <iostream>
using namespace std;

int main() {
    int matrix[100][100] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    int rows = 3;
    int cols = 3;

    int transposed_matrix[100][100];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed_matrix[j][i] = matrix[i][j];
        }
    }

    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            cout << transposed_matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

//q11
#include <iostream>

using namespace std;

int main() {
    int matrix[100][100]; 
    int n,j; 

    cout << "Enter the size of the square matrix: ";
    cin >> n;

    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    int primarySum = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++){
            if(matrix[i]==matrix[j]){
                 primarySum += matrix[i][j];
        }
        
        }
    }   


    cout << "Sum of primary diagonal elements: " << primarySum << endl;

    return 0;
}

//q12
#include <iostream>

using namespace std;

int main() {
    int matrix[100][100];
    int rows, cols;

    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;

    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }

    for (int i = 0; i < rows; i++) {
        int currentRowSum = 0;
        for (int j = 0; j < cols; j++) {
            currentRowSum += matrix[i][j];
        }

        if (currentRowSum > maxRowSum) {
            maxRowSum = currentRowSum;
            maxRowIndex = i;
        }
    }

    if (maxRowIndex != -1) {
        cout << "Row with the maximum sum: " << maxRowIndex << endl;
        cout << "Maximum sum: " << maxRowSum << endl;
    } else {
        cout << "Matrix is empty or invalid." << endl;
    }

    return 0;
}
